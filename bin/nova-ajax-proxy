#!/usr/bin/python

from eventlet import greenthread
from eventlet.green import urllib2  

import exceptions
import logging
import os
import sys
import time
import urlparse


# If ../nova/__init__.py exists, add ../ to Python search path, so that
# it will override what happens to be installed in /usr/(local/)lib/python...
possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(possible_topdir, 'nova', '__init__.py')):
    sys.path.insert(0, possible_topdir)

from nova import flags
from nova import utils
from nova import rpc
from nova import wsgi

FLAGS = flags.FLAGS

flags.DEFINE_integer('ajax_console_idle_timeout', 300, 
                     'Seconds before idle connection destroyed')
 

class AjaxConsoleProxy(object):
    tokens = {}

    def __call__(self, env, start_response):
        try:
            req_url = '%s://%s%s?%s' % (env['wsgi.url_scheme'],
                                        env['HTTP_HOST'],
                                        env['PATH_INFO'],
                                        env['QUERY_STRING'])
            if 'HTTP_REFERER' in env:
                auth_url = env['HTTP_REFERER']
            else:
                auth_url = req_url

            auth_params = urlparse.parse_qs(urlparse.urlparse(auth_url).query)
            parsed_url = urlparse.urlparse(req_url)

            auth_info = AjaxConsoleProxy.tokens[auth_params['token'][0]]
            args = auth_info['args'] 
            auth_info['last_activity'] = time.time() 

            remote_url = ("http://%s:%s%s?token=%s"% (
                          str(args['host']),
                          str(args['port']),
                          parsed_url.path,
                          str(args['token'])))

            opener = urllib2.urlopen(remote_url, env['wsgi.input'].read())
            body = opener.read()
            info = opener.info()

            start_response("200 OK", info.dict.items())
            return body
        except (exceptions.KeyError):
            start_response("401 NOT AUTHORIZED",[])
            return "Not Authorized"
        except Exception:
            start_response("500 ERROR",[])
            return "Server Error"


    def register_listeners(self):
        class Callback:
            def __call__(self, data, message):
                if data['method'] == 'authorize_ajax_console':
                    AjaxConsoleProxy.tokens[data['args']['token']] =  \
                        {'args': data['args'], 'last_activity': time.time()}

        conn = rpc.Connection.instance(new=True)
        consumer = rpc.TopicConsumer(
                        connection=conn,
                        topic=FLAGS.ajax_console_proxy_topic)
        consumer.register_callback(Callback())

        def delete_expired_tokens():
            now = time.time()
            to_delete = []
            for k, v in AjaxConsoleProxy.tokens.items():
                if now - v['last_activity'] > FLAGS.ajax_console_idle_timeout:
                    to_delete.append(k)

            for k in to_delete:
                del AjaxConsoleProxy.tokens[k]

        utils.LoopingCall(consumer.fetch, auto_ack=True, 
                          enable_callbacks=True).start(0.1)
        utils.LoopingCall(delete_expired_tokens).start(1)

if __name__ == '__main__':
    utils.default_flagfile()
    FLAGS(sys.argv)
    server = wsgi.Server()
    acp = AjaxConsoleProxy()
    acp.register_listeners()
    server.start(acp, FLAGS.ajax_console_proxy_port, host='0.0.0.0')
    server.wait()

