#!/usr/bin/env python
# vim: tabstop=4 shiftwidth=4 softtabstop=4

# Copyright 2010 United States Government as represented by the
# Administrator of the National Aeronautics and Space Administration.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

"""
Handle lease database updates from DHCP servers.
"""

import logging
import os
import sys

#TODO(joshua): there is concern that the user dnsmasq runs under will not
#              have nova in the path. This should be verified and if it is
#              not true the ugly line below can be removed
sys.path.append(os.path.abspath(os.path.join(__file__, "../../")))

from nova import flags
from nova import rpc
from nova import utils
from nova.network import linux_net
from nova.network import model
from nova.network import service

FLAGS = flags.FLAGS


def add_lease(_mac, ip_address, _hostname, _interface):
    """Set the IP that was assigned by the DHCP server."""
    if FLAGS.fake_rabbit:
        service.VlanNetworkService().lease_ip(ip_address)
    else:
        rpc.cast("%s.%s" % (FLAGS.network_topic, FLAGS.node_name),
                 {"method": "lease_ip",
                  "args": {"fixed_ip": ip_address}})


def old_lease(_mac, _ip_address, _hostname, _interface):
    """Do nothing, just an old lease update."""
    logging.debug("Adopted old lease or got a change of mac/hostname")


def del_lease(_mac, ip_address, _hostname, _interface):
    """Called when a lease expires."""
    if FLAGS.fake_rabbit:
        service.VlanNetworkService().release_ip(ip_address)
    else:
        rpc.cast("%s.%s" % (FLAGS.network_topic, FLAGS.node_name),
                 {"method": "release_ip",
                  "args": {"fixed_ip": ip_address}})


def init_leases(interface):
    """Get the list of hosts for an interface."""
    net = model.get_network_by_interface(interface)
    res = ""
    for address in net.assigned_objs:
        res += "%s\n" % linux_net.host_dhcp(address)
    return res


def main():
    """Parse environment and arguments and call the approproate action."""
    flagfile = os.environ.get('FLAGFILE', FLAGS.dhcpbridge_flagfile)
    utils.default_flagfile(flagfile)
    argv = FLAGS(sys.argv)
    interface = os.environ.get('DNSMASQ_INTERFACE', 'br0')
    if int(os.environ.get('TESTING', '0')):
        FLAGS.fake_rabbit = True
        FLAGS.redis_db = 8
        FLAGS.network_size = 32
        FLAGS.connection_type = 'fake'
        FLAGS.fake_network = True
        FLAGS.auth_driver = 'nova.auth.ldapdriver.FakeLdapDriver'
    action = argv[1]
    if action in ['add', 'del', 'old']:
        mac = argv[2]
        ip = argv[3]
        hostname = argv[4]
        logging.debug("Called %s for mac %s with ip %s and "
                      "hostname %s on interface %s",
                      action, mac, ip, hostname, interface)
        globals()[action + '_lease'](mac, ip, hostname, interface)
    else:
        print init_leases(interface)

if __name__ == "__main__":
    main()
