#!/usr/bin/env python
# vim: tabstop=4 shiftwidth=4 softtabstop=4

# Copyright 2010 United States Government as represented by the
# Administrator of the National Aeronautics and Space Administration.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

"""
  Twistd daemon for the nova compute nodes.
"""

import eventlet
eventlet.monkey_patch()

import os
import sys

# If ../nova/__init__.py exists, add ../ to Python search path, so that
# it will override what happens to be installed in /usr/(local/)lib/python...
possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(possible_topdir, 'nova', '__init__.py')):
    sys.path.insert(0, possible_topdir)

from nova import api
from nova import flags
from nova import service_eventlet
from nova import wsgi


FLAGS = flags.FLAGS
flags.DEFINE_integer('api_port', 8773, 'API port')

FLAGS = flags.FLAGS
flags.DEFINE_integer('osapi_port', 8774, 'OpenStack API port')
flags.DEFINE_string('osapi_host', '0.0.0.0', 'OpenStack API host')
flags.DEFINE_integer('ec2api_port', 8773, 'EC2 API port')
flags.DEFINE_string('ec2api_host', '0.0.0.0', 'EC2 API host')


if __name__ == '__main__':
    FLAGS(sys.argv)
    
    compute = service_eventlet.Service.create(binary='nova-compute')
    network = service_eventlet.Service.create(binary='nova-network')
    volume = service_eventlet.Service.create(binary='nova-volume')
    scheduler = service_eventlet.Service.create(binary='nova-scheduler')
    #objectstore = service_eventlet.Service.create(binary='nova-objectstore')

    service_eventlet.serve(compute, network, volume, scheduler)

    server = wsgi.Server()
    server.start(api.API('os'), FLAGS.osapi_port, host=FLAGS.osapi_host)
    server.start(api.API('ec2'), FLAGS.ec2api_port, host=FLAGS.ec2api_host)
    server.wait()
    
