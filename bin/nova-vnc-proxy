#!/usr/bin/env python
# pylint: disable-msg=C0103
# vim: tabstop=4 shiftwidth=4 softtabstop=4

# Copyright 2010 United States Government as represented by the
# Administrator of the National Aeronautics and Space Administration.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

"""VNC Console Proxy Server"""

import eventlet
import gettext
import os
import sys

possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(possible_topdir, 'nova', '__init__.py')):
    sys.path.insert(0, possible_topdir)

gettext.install('nova', unicode=1)

from nova import flags
from nova import log as logging
from nova import utils
from nova import wsgi
from nova.vnc import auth
from nova.vnc import proxy

FLAGS = flags.FLAGS
flags.DEFINE_string('vnc_proxy_wwwroot', '/code/noVNC/vnclet/noVNC',
                     'Full path to noVNC directory')
flags.DEFINE_boolean('vnc_debug', False,
                     'Enable debugging features, like token bypassing')
flags.DEFINE_integer('vnc_proxy_port', 7000,
                     'Port that the VNC proxy should bind to')
flags.DEFINE_string('vnc_proxy_host', '0.0.0.0',
                     'Address that the VNC proxy should bind to')
flags.DEFINE_flag(flags.HelpFlag())
flags.DEFINE_flag(flags.HelpshortFlag())
flags.DEFINE_flag(flags.HelpXMLFlag())

if __name__ == "__main__":
    utils.default_flagfile()
    FLAGS(sys.argv)
    logging.setup()

    app = proxy.WebsocketVNCProxy(FLAGS.vnc_proxy_wwwroot)

    if FLAGS.vnc_debug:
        app = proxy.DebugMiddleware(app.serve)
    else:
        app = auth.NovaAuthMiddleware(app.serve)


    listener = eventlet.listen((FLAGS.vnc_proxy_host, FLAGS.vnc_proxy_port))
 
 
    from eventlet import wsgi
    wsgi.server(listener, app, max_size=1000)


#    server = wsgi.Server()
#    server.start(app, FLAGS.vnc_proxy_port, host=FLAGS.vnc_proxy_host)
#    server.wait()
